require('dotenv').config();

console.log('üîç Validador de Vari√°veis de Ambiente\n');

// Vari√°veis obrigat√≥rias
const requiredVars = [
    'NODE_ENV',
    'MONGODB_URI',
    'JWT_SECRET',
    'JWT_REFRESH_SECRET',
    'OPENAI_API_KEY'
];

// Vari√°veis opcionais
const optionalVars = [
    'PORT',
    'CLIENT_URL',
    'ADMIN_PASSWORD',
    'WHATSAPP_API_KEY',
    'LOG_LEVEL'
];

// Verificar vari√°veis obrigat√≥rias
console.log('üìã Verificando vari√°veis obrigat√≥rias:');
let missingVars = [];

requiredVars.forEach(varName => {
    if (!process.env[varName]) {
        console.log(`   ‚ùå ${varName}: N√£o configurada`);
        missingVars.push(varName);
    } else {
        console.log(`   ‚úÖ ${varName}: Configurada`);
    }
});

// Verificar vari√°veis opcionais
console.log('\nüìã Verificando vari√°veis opcionais:');
optionalVars.forEach(varName => {
    if (!process.env[varName]) {
        console.log(`   ‚ö†Ô∏è  ${varName}: N√£o configurada (opcional)`);
    } else {
        console.log(`   ‚úÖ ${varName}: Configurada`);
    }
});

// Verificar valores espec√≠ficos
console.log('\nüîç Verificando valores espec√≠ficos:');

// NODE_ENV
if (process.env.NODE_ENV) {
    const validEnvs = ['development', 'staging', 'production'];
    if (validEnvs.includes(process.env.NODE_ENV)) {
        console.log(`   ‚úÖ NODE_ENV: ${process.env.NODE_ENV} (v√°lido)`);
    } else {
        console.log(`   ‚ö†Ô∏è  NODE_ENV: ${process.env.NODE_ENV} (valor inesperado)`);
    }
}

// JWT_SECRET
if (process.env.JWT_SECRET) {
    if (process.env.JWT_SECRET.length >= 32) {
        console.log(`   ‚úÖ JWT_SECRET: ${process.env.JWT_SECRET.length} caracteres (adequado)`);
    } else {
        console.log(`   ‚ùå JWT_SECRET: ${process.env.JWT_SECRET.length} caracteres (muito curto)`);
        missingVars.push('JWT_SECRET_LENGTH');
    }
}

// JWT_REFRESH_SECRET
if (process.env.JWT_REFRESH_SECRET) {
    if (process.env.JWT_REFRESH_SECRET.length >= 32) {
        console.log(`   ‚úÖ JWT_REFRESH_SECRET: ${process.env.JWT_REFRESH_SECRET.length} caracteres (adequado)`);
    } else {
        console.log(`   ‚ùå JWT_REFRESH_SECRET: ${process.env.JWT_REFRESH_SECRET.length} caracteres (muito curto)`);
        missingVars.push('JWT_REFRESH_SECRET_LENGTH');
    }
}

// Verificar se as chaves JWT s√£o diferentes
if (process.env.JWT_SECRET && process.env.JWT_REFRESH_SECRET) {
    if (process.env.JWT_SECRET === process.env.JWT_REFRESH_SECRET) {
        console.log(`   ‚ùå JWT_SECRET e JWT_REFRESH_SECRET s√£o iguais (inseguro)`);
        missingVars.push('JWT_KEYS_SAME');
    } else {
        console.log(`   ‚úÖ JWT_SECRET e JWT_REFRESH_SECRET s√£o diferentes (seguro)`);
    }
}

// MONGODB_URI
if (process.env.MONGODB_URI) {
    if (process.env.MONGODB_URI.includes('mongodb://') || process.env.MONGODB_URI.includes('mongodb+srv://')) {
        console.log(`   ‚úÖ MONGODB_URI: Formato v√°lido`);
    } else {
        console.log(`   ‚ö†Ô∏è  MONGODB_URI: Formato suspeito`);
    }
}

// CLIENT_URL
if (process.env.CLIENT_URL) {
    if (process.env.NODE_ENV === 'production' && !process.env.CLIENT_URL.startsWith('https://')) {
        console.log(`   ‚ö†Ô∏è  CLIENT_URL: Deve usar HTTPS em produ√ß√£o`);
    } else {
        console.log(`   ‚úÖ CLIENT_URL: ${process.env.CLIENT_URL}`);
    }
}

// ADMIN_PASSWORD
if (process.env.ADMIN_PASSWORD) {
    if (process.env.ADMIN_PASSWORD.length >= 8) {
        console.log(`   ‚úÖ ADMIN_PASSWORD: ${process.env.ADMIN_PASSWORD.length} caracteres (adequado)`);
    } else {
        console.log(`   ‚ö†Ô∏è  ADMIN_PASSWORD: ${process.env.ADMIN_PASSWORD.length} caracteres (muito curto)`);
    }
}

// OPENAI_API_KEY
if (process.env.OPENAI_API_KEY) {
    if (process.env.OPENAI_API_KEY.startsWith('sk-')) {
        console.log(`   ‚úÖ OPENAI_API_KEY: Formato v√°lido`);
    } else {
        console.log(`   ‚ö†Ô∏è  OPENAI_API_KEY: Formato suspeito`);
    }
}

// Resultado final
console.log('\nüìä RESULTADO:');
if (missingVars.length === 0) {
    console.log('‚úÖ Todas as vari√°veis obrigat√≥rias est√£o configuradas!');
    console.log('üöÄ Sistema pronto para iniciar.');
} else {
    console.log(`‚ùå ${missingVars.length} problema(s) encontrado(s):`);
    missingVars.forEach(problem => {
        switch(problem) {
            case 'JWT_SECRET_LENGTH':
                console.log('   - JWT_SECRET deve ter pelo menos 32 caracteres');
                break;
            case 'JWT_REFRESH_SECRET_LENGTH':
                console.log('   - JWT_REFRESH_SECRET deve ter pelo menos 32 caracteres');
                break;
            case 'JWT_KEYS_SAME':
                console.log('   - JWT_SECRET e JWT_REFRESH_SECRET devem ser diferentes');
                break;
            default:
                console.log(`   - ${problem} n√£o configurada`);
        }
    });
    console.log('\nüí° SOLU√á√ïES:');
    console.log('1. Execute: npm run generate-secrets');
    console.log('2. Configure as vari√°veis no arquivo .env');
    console.log('3. Execute este script novamente');
    process.exit(1);
}

// Verifica√ß√µes espec√≠ficas por ambiente
console.log('\nüåç Verifica√ß√µes espec√≠ficas por ambiente:');

if (process.env.NODE_ENV === 'production') {
    console.log('üîí Verifica√ß√µes de PRODU√á√ÉO:');
    
    if (process.env.JWT_SECRET && process.env.JWT_SECRET.includes('dev')) {
        console.log('   ‚ö†Ô∏è  JWT_SECRET parece ser de desenvolvimento');
    }
    
    if (process.env.JWT_REFRESH_SECRET && process.env.JWT_REFRESH_SECRET.includes('dev')) {
        console.log('   ‚ö†Ô∏è  JWT_REFRESH_SECRET parece ser de desenvolvimento');
    }
    
    /*if (process.env.ADMIN_PASSWORD && process.env.ADMIN_PASSWORD === 'admin123456') {
        console.log('   ‚ö†Ô∏è  ADMIN_PASSWORD parece ser padr√£o');
    }*/
    
    if (process.env.CLIENT_URL && !process.env.CLIENT_URL.startsWith('https://')) {
        console.log('   ‚ö†Ô∏è  CLIENT_URL deve usar HTTPS em produ√ß√£o');
    }
    
    if (process.env.LOG_LEVEL === 'debug') {
        console.log('   ‚ö†Ô∏è  LOG_LEVEL=debug pode ser muito verboso em produ√ß√£o');
    }
    
    console.log('   ‚úÖ Verifica√ß√µes de produ√ß√£o conclu√≠das');
}

if (process.env.NODE_ENV === 'development') {
    console.log('üõ†Ô∏è  Verifica√ß√µes de DESENVOLVIMENTO:');
    
    if (process.env.LOG_LEVEL !== 'debug') {
        console.log('   üí° Considere usar LOG_LEVEL=debug para desenvolvimento');
    }
    
    console.log('   ‚úÖ Verifica√ß√µes de desenvolvimento conclu√≠das');
}

console.log('\nüéØ PR√ìXIMOS PASSOS:');
console.log('1. Se tudo estiver OK, execute: npm start');
console.log('2. Teste a API: curl http://localhost:5000/api/health');
console.log('3. Teste o frontend: open frontend-test.html');

console.log('\nüìö DOCUMENTA√á√ÉO:');
console.log('- Guia completo: GUIA_VARIAVEIS_AMBIENTE.md');
console.log('- Gera√ß√£o de chaves: npm run generate-secrets');
console.log('- Migra√ß√£o: npm run migrate'); 