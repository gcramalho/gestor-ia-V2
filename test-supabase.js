require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

console.log('üîß Teste de Configura√ß√£o do Supabase\n');

// Verificar vari√°veis de ambiente
console.log('1Ô∏è‚É£ Verificando vari√°veis de ambiente:');
console.log(`   SUPABASE_URL: ${process.env.SUPABASE_URL ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
console.log(`   SUPABASE_KEY: ${process.env.SUPABASE_KEY ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
console.log(`   SUPABASE_ANON_KEY: ${process.env.SUPABASE_ANON_KEY ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
console.log(`   SUPABASE_SERVICE_KEY: ${process.env.SUPABASE_SERVICE_KEY ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);

// Valores das vari√°veis (mascarados)
if (process.env.SUPABASE_URL) {
    console.log(`   URL: ${process.env.SUPABASE_URL.substring(0, 30)}...`);
}
if (process.env.SUPABASE_KEY) {
    console.log(`   KEY: ${process.env.SUPABASE_KEY.substring(0, 20)}...`);
}
if (process.env.SUPABASE_ANON_KEY) {
    console.log(`   ANON_KEY: ${process.env.SUPABASE_ANON_KEY.substring(0, 20)}...`);
}
if (process.env.SUPABASE_SERVICE_KEY) {
    console.log(`   SERVICE_KEY: ${process.env.SUPABASE_SERVICE_KEY.substring(0, 20)}...`);
}

console.log('');

// Testar conex√£o com Supabase
async function testSupabaseConnection() {
    console.log('2Ô∏è‚É£ Testando conex√£o com Supabase:');
    
    try {
        // Teste com SUPABASE_KEY (se dispon√≠vel)
        if (process.env.SUPABASE_URL && process.env.SUPABASE_KEY) {
            console.log('   Testando com SUPABASE_KEY...');
            const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
            
            // Teste simples de conex√£o
            const { data, error } = await supabase.from('_test_connection').select('*').limit(1);
            
            if (error) {
                if (error.message.includes('does not exist')) {
                    console.log('   ‚úÖ Conex√£o estabelecida (tabela de teste n√£o existe, mas conex√£o OK)');
                } else {
                    console.log(`   ‚ùå Erro na conex√£o: ${error.message}`);
                }
            } else {
                console.log('   ‚úÖ Conex√£o estabelecida com sucesso');
            }
        } else {
            console.log('   ‚ö†Ô∏è SUPABASE_URL ou SUPABASE_KEY n√£o configurados');
        }

        // Teste com SUPABASE_ANON_KEY (se dispon√≠vel)
        if (process.env.SUPABASE_URL && process.env.SUPABASE_ANON_KEY) {
            console.log('   Testando com SUPABASE_ANON_KEY...');
            const supabaseAnon = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);
            
            const { data, error } = await supabaseAnon.from('_test_connection').select('*').limit(1);
            
            if (error) {
                if (error.message.includes('does not exist')) {
                    console.log('   ‚úÖ Conex√£o an√¥nima estabelecida (tabela de teste n√£o existe, mas conex√£o OK)');
                } else {
                    console.log(`   ‚ùå Erro na conex√£o an√¥nima: ${error.message}`);
                }
            } else {
                console.log('   ‚úÖ Conex√£o an√¥nima estabelecida com sucesso');
            }
        } else {
            console.log('   ‚ö†Ô∏è SUPABASE_URL ou SUPABASE_ANON_KEY n√£o configurados');
        }

    } catch (error) {
        console.log(`   ‚ùå Erro geral na conex√£o: ${error.message}`);
    }
}

// Testar autentica√ß√£o
async function testSupabaseAuth() {
    console.log('\n3Ô∏è‚É£ Testando autentica√ß√£o do Supabase:');
    
    try {
        if (process.env.SUPABASE_URL && process.env.SUPABASE_KEY) {
            const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
            
            // Teste de cria√ß√£o de usu√°rio
            const testEmail = `testando@gmail.com`;
            const testPassword = 'test123456';
            
            console.log(`   Tentando criar usu√°rio: ${testEmail}`);
            
            const { data, error } = await supabase.auth.signUp({
                email: testEmail,
                password: testPassword,
            });
            
            if (error) {
                console.log(`   ‚ùå Erro ao criar usu√°rio: ${error.message}`);
                
                if (error.message.includes('fetch failed')) {
                    console.log('   üîç PROBLEMA IDENTIFICADO: fetch failed');
                    console.log('   üí° POSS√çVEIS CAUSAS:');
                    console.log('      ‚Ä¢ URL do Supabase incorreta');
                    console.log('      ‚Ä¢ Problema de conectividade de rede');
                    console.log('      ‚Ä¢ Firewall bloqueando a conex√£o');
                    console.log('      ‚Ä¢ Projeto Supabase inativo ou suspenso');
                }
            } else {
                console.log('   ‚úÖ Usu√°rio criado com sucesso');
                console.log(`   ID do usu√°rio: ${data.user.id}`);
                
                // Tentar deletar o usu√°rio de teste
                try {
                    await supabase.auth.admin.deleteUser(data.user.id);
                    console.log('   ‚úÖ Usu√°rio de teste removido');
                } catch (deleteError) {
                    console.log(`   ‚ö†Ô∏è N√£o foi poss√≠vel remover usu√°rio de teste: ${deleteError.message}`);
                }
            }
        } else {
            console.log('   ‚ö†Ô∏è Vari√°veis do Supabase n√£o configuradas para teste de auth');
        }
    } catch (error) {
        console.log(`   ‚ùå Erro no teste de autentica√ß√£o: ${error.message}`);
    }
}

// Testar configura√ß√£o do app.js
function testAppConfig() {
    console.log('\n4Ô∏è‚É£ Verificando configura√ß√£o do app.js:');
    
    try {
        const app = require('./app.js');
        const supabase = app.get('supabase');
        
        if (supabase) {
            console.log('   ‚úÖ Supabase configurado no app.js');
            console.log(`   URL: ${supabase.supabaseUrl}`);
            console.log(`   Key: ${supabase.supabaseKey.substring(0, 20)}...`);
        } else {
            console.log('   ‚ùå Supabase n√£o configurado no app.js');
        }
    } catch (error) {
        console.log(`   ‚ùå Erro ao verificar app.js: ${error.message}`);
    }
}

// Executar todos os testes
async function runAllTests() {
    await testSupabaseConnection();
    await testSupabaseAuth();
    testAppConfig();
    
    console.log('\n5Ô∏è‚É£ RESUMO E RECOMENDA√á√ïES:');
    console.log('');
    
    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
        console.log('‚ùå PROBLEMA: Vari√°veis do Supabase n√£o configuradas');
        console.log('üí° SOLU√á√ÉO: Configure as vari√°veis de ambiente:');
        console.log('   SUPABASE_URL=sua_url_do_supabase');
        console.log('   SUPABASE_KEY=sua_chave_do_supabase');
        console.log('   SUPABASE_ANON_KEY=sua_chave_anonima');
        console.log('   SUPABASE_SERVICE_KEY=sua_chave_de_servico');
    } else {
        console.log('‚úÖ Vari√°veis do Supabase configuradas');
    }
    
    console.log('');
    console.log('üîß PR√ìXIMOS PASSOS:');
    console.log('1. Verifique se o projeto Supabase est√° ativo');
    console.log('2. Confirme se as chaves est√£o corretas');
    console.log('3. Teste a conectividade de rede');
    console.log('4. Verifique os logs do backend');
    console.log('5. Use o arquivo test-auth.html para testar via frontend');
}

// Executar testes
runAllTests().catch(console.error); 